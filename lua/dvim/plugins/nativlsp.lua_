local icons = require("dvim.icons")
local kind_icons = icons.kind

local M = {
    formatting = {
        source_names = {},
        duplicates = {},
        duplicates_default = 1,
    }
}

local core_plugins = {
    { "j-hui/fidget.nvim", opts = {}, },
    {
        "SmiteshP/nvim-navbuddy",
        dependencies = {
            { "SmiteshP/nvim-navic", opts = {}, },
            "MunifTanjim/nui.nvim"
        },
        opts = { lsp = { auto_attach = true } }
    },
    {
        name = "nvim-cmp",
        dir = "/work/ddcien/nvim-cmp",
        -- dev = true,
        -- { name = "ddvim-snippets",    dir = '/home/ddcien/WORK/ddvim-snippets' },
        opts = function()
            return {}
        end,

        config = function()
            local cmp = require("cmp")
            local luasnip = require("luasnip")
            cmp.setup({
                snippet = {
                    expand = function(args)
                        -- vim.fn["UltiSnips#Anon"](args.body)
                        require('luasnip').lsp_expand(args.body)
                    end,
                },
                mapping = cmp.mapping.preset.insert({
                    ["<c-p>"] = cmp.mapping.select_prev_item(),
                    ["<c-n>"] = cmp.mapping.select_next_item(),
                    ['<c-Space>'] = cmp.mapping.complete(),
                    ['<c-e>'] = cmp.mapping.abort(),
                    ['<c-y>'] = cmp.mapping.confirm({ select = false }),
                    ['<CR>'] = cmp.mapping.confirm({ select = false }),

                    ["<Tab>"] = cmp.mapping(function(fallback)
                        if luasnip.expand_or_locally_jumpable() then
                            luasnip.expand_or_jump()
                        elseif cmp.visible() then
                            cmp.select_next_item()
                        else
                            fallback()
                        end
                    end, { "i", "s" }),
                    ["<S-Tab>"] = cmp.mapping(function(fallback)
                        if luasnip.jumpable(-1) then
                            luasnip.jump(-1)
                        elseif cmp.visible() then
                            cmp.select_prev_item()
                        else
                            fallback()
                        end
                    end, { "i", "s" }),
                }),
                sources = cmp.config.sources({
                    { name = 'nvim_lsp' },
                }, {
                    { name = 'luasnip', },
                    { name = 'buffer' },
                    { name = 'path' },
                    { name = 'look' },
                }),
                matching = {
                    disallow_fuzzy_matching = false, -- fmodify -> fnamemodify
                    disallow_fullfuzzy_matching = true,
                    disallow_partial_fuzzy_matching = true,
                    disallow_partial_matching = false, -- fb -> foo_bar
                    disallow_prefix_unmatching = true, -- bar -> foo_bar
                },
                confirm_opts = {
                    behavior = cmp.ConfirmBehavior.Replace,
                    select = false,
                },
                experimental = {
                    ghost_text = false,
                },
                view = {
                    entries = {
                        name = "native",
                    },
                },
                performance = {
                    debounce = 50,
                    throttle = 20,
                    confirm_resolve_timeout = 50,
                    async_budget = 1,
                    fetching_timeout = 200,
                    max_view_entries = 50,
                },
                completion = {
                    autocomplete = {
                        'InsertEnter',
                        'TextChanged'
                    },
                    keyword_length = 1,
                },
                window = {
                    completion = cmp.config.window.bordered(),
                    documentation = cmp.config.window.bordered(),
                },
                formatting = {
                    -- expandable_indicator = true,
                    -- fields = { "kind", "abbr", "menu" },
                    format = function(entry, vim_item)
                        local max_width = 60
                        if max_width ~= 0 and #vim_item.abbr > max_width then
                            vim_item.abbr = string.sub(vim_item.abbr, 1, max_width - 1) .. icons.ui.Ellipsis
                        end
                        vim_item.kind = kind_icons[vim_item.kind]
                        vim_item.dup = M.formatting.duplicates[entry.source.name] or M.formatting.duplicates_default
                        if entry.source.name == "nvim_lsp" then
                            vim_item.menu = "LSP:" .. entry.source.source.client.name
                        else
                            vim_item.menu = M.formatting.source_names[entry.source.name] or entry.source.name
                        end
                        return vim_item
                    end,
                },
            })
        end,
        dependencies = {
            { "hrsh7th/cmp-nvim-lsp", lazy = true },
            { "hrsh7th/cmp-buffer",   lazy = true },
            { "hrsh7th/cmp-path",     lazy = true },
            { "octaltree/cmp-look",   lazy = true },

            {
                'L3MON4D3/LuaSnip',
                version = "v2.*",
                build = "make install_jsregexp",
                dependencies = {
                    {
                        "rafamadriz/friendly-snippets"
                    }
                },
                config = function()
                    require("luasnip.loaders.from_vscode").lazy_load()
                end
            },
            { 'saadparwaiz1/cmp_luasnip', lazy = true },
            -- { 'SirVer/ultisnips',                    lazy = true },
            -- { 'quangnguyen30192/cmp-nvim-ultisnips', lazy = true },
        },
        event = { "InsertEnter", "CmdlineEnter" },
        lazy = true,
    },
    {
        "neovim/nvim-lspconfig",
        dependencies = {
            "nvim-telescope/telescope.nvim",
        },
        config = require("dvim.configs.lsp").setup,
    },
}
return core_plugins
